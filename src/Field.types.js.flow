// @flow
import type {
  ConnectedComponent,
  Structure,
  Event,
  ReactContext
} from './types.js.flow'
import type { InstanceApi as ConnectedFieldInstanceApi } from './ConnectedField.types.js.flow'
import type { Component as ReactComponent } from 'react'

type Validator = (value: any, allValues: Object, props: Object) => ?any

export type Props = {
  name: string,
  component: ReactClass<*> | Function | string,
  format?: ?(value: any, name: string) => ?string,
  normalize?: (
    value: any,
    previousValue: any,
    allValues: Object,
    previousAllValues: Object
  ) => ?any,
  onBlur?: (event: Event, newValue: any, previousValue: any) => void,
  onChange?: (event: Event, newValue: any, previousValue: any) => void,
  onDragStart?: (event: Event) => void,
  onDrop?: (event: Event, newValue: any, previousValue: any) => void,
  onFocus?: (event: Event) => void,
  parse?: (value: any, name: string) => any,
  props?: Object,
  validate?: Validator | Validator[],
  warn?: Validator | Validator[],
  withRef?: boolean
}
