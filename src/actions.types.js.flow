// @flow
import type { Action, FieldType } from './types'
import type {
  ArrayInsertType,
  ArrayMoveType,
  ArrayPopType,
  ArrayPushType,
  ArrayRemoveType,
  ArrayRemoveAllType,
  ArrayShiftType,
  ArraySpliceType,
  ArrayUnshiftType,
  ArraySwapType,
  AutofillType,
  BlurType,
  ChangeType,
  ClearSubmitType,
  ClearSubmitErrorsType,
  ClearAsyncErrorType,
  DestroyType,
  FocusType,
  InitializeType,
  RegisterFieldType,
  ResetType,
  SetSubmitFailedType,
  SetSubmitSucceededType,
  StartAsyncValidationType,
  StartSubmitType,
  StopAsyncValidationType,
  StopSubmitType,
  SubmitType,
  TouchType,
  UnregisterFieldType,
  UntouchType,
  UpdateSyncErrorsType,
  UpdateSyncWarningsType
} from './actionTypes.types'

export type ArrayInsertAction = {
  type: ArrayInsertType,
  meta: { form: string, field: string, index: number },
  payload: any
} & Action
export type ArrayInsert = {
  (form: string, field: string, index: number, value: any): ArrayInsertAction
}
export type ArrayMoveAction = {
  type: ArrayMoveType,
  meta: { form: string, field: string, from: number, to: number }
} & Action
export type ArrayMove = {
  (form: string, field: string, from: number, to: number): ArrayMoveAction
}
export type ArrayPopAction = {
  type: ArrayPopType,
  meta: { form: string, field: string }
} & Action
export type ArrayPop = { (form: string, field: string): ArrayPopAction }
export type ArrayPushAction = {
  type: ArrayPushType,
  meta: { form: string, field: string },
  payload: any
} & Action
export type ArrayPush = {
  (form: string, field: string, value: any): ArrayPushAction
}
export type ArrayRemoveAction = {
  type: ArrayRemoveType,
  meta: { form: string, field: string, index: number }
} & Action
export type ArrayRemove = {
  (form: string, field: string, index: number): ArrayRemoveAction
}
export type ArrayRemoveAllAction = {
  type: ArrayRemoveAllType,
  meta: { form: string, field: string }
} & Action
export type ArrayRemoveAll = {
  (form: string, field: string): ArrayRemoveAllAction
}
export type ArrayShiftAction = {
  type: ArrayShiftType,
  meta: { form: string, field: string }
} & Action
export type ArrayShift = { (form: string, field: string): ArrayShiftAction }
export type ArraySpliceAction = {
  type: ArraySpliceType,
  meta: {
    form: string,
    field: string,
    index: number,
    removeNum: number
  },
  payload?: any
} & Action
export type ArraySplice = {
  (
    form: string,
    field: string,
    index: number,
    removeNum: number,
    value: any
  ): ArraySpliceAction
}
export type ArraySwapAction = {
  type: ArraySwapType,
  meta: { form: string, field: string, indexA: number, indexB: number }
} & Action
export type ArraySwap = {
  (form: string, field: string, indexA: number, indexB: number): ArraySwapAction
}
export type ArrayUnshiftAction = {
  type: ArrayUnshiftType,
  meta: { form: string, field: string },
  payload: any
} & Action
export type ArrayUnshift = {
  (form: string, field: string, value: any): ArrayUnshiftAction
}
export type AutofillAction = {
  type: AutofillType,
  meta: { form: string, field: string },
  payload: any
} & Action
export type Autofill = {
  (form: string, field: string, value: any): AutofillAction
}
export type BlurAction = {
  type: BlurType,
  meta: { form: string, field: string, touch: boolean },
  payload: any
} & Action
export type Blur = {
  (form: string, field: string, value: any, touch: boolean): BlurAction
}
export type ChangeAction = {
  type: ChangeType,
  meta: {
    form: string,
    field: string,
    touch: boolean,
    persistentSubmitErrors: boolean
  },
  payload: any
} & Action
export type Change = {
  (
    form: string,
    field: string,
    value: any,
    touch: boolean,
    persistentSubmitErrors: boolean
  ): ChangeAction
}
export type ClearSubmitAction = {
  type: ClearSubmitType,
  meta: { form: string }
} & Action
export type ClearSubmit = { (form: string): ClearSubmitAction }
export type ClearSubmitErrorsAction = {
  type: ClearSubmitErrorsType,
  meta: { form: string }
} & Action
export type ClearSubmitErrors = { (form: string): ClearSubmitErrorsAction }
export type ClearAsyncErrorAction = {
  type: ClearAsyncErrorType,
  meta: { form: string, field: string }
} & Action
export type ClearAsyncError = {
  (form: string, field: string): ClearAsyncErrorAction
}
export type DestroyAction = {
  type: DestroyType,
  meta: { form: string[] }
} & Action
export type Destroy = { (...forms: string[]): DestroyAction }
export type FocusAction = {
  type: FocusType,
  meta: { form: string, field: string }
} & Action
export type Focus = { (form: string, field: string): FocusAction }
export type InitializeAction = {
  type: InitializeType,
  meta: { form: string, keepDirty: boolean },
  payload: Object
} & Action
export type Initialize = {
  (
    form: string,
    values: Object,
    keepDirty: boolean,
    otherMeta: Object
  ): InitializeAction
}
export type RegisterFieldAction = {
  type: RegisterFieldType,
  meta: { form: string },
  payload: { name: string, type: FieldType }
} & Action
export type RegisterField = {
  (form: string, name: string, type: FieldType): RegisterFieldAction
}
export type ResetAction = {
  type: ResetType,
  meta: { form: string }
} & Action
export type Reset = { (form: string): ResetAction }
export type StartAsyncValidationAction = {
  type: StartAsyncValidationType,
  meta: { form: string, field: string }
} & Action
export type StartAsyncValidation = {
  (
    form: string,
    field: string,
    index: number,
    value: any
  ): StartAsyncValidationAction
}
export type StartSubmitAction = {
  type: StartSubmitType,
  meta: { form: string }
} & Action
export type StartSubmit = { (form: string): StartSubmitAction }
export type StopAsyncValidationAction = {
  type: StopAsyncValidationType,
  meta: { form: string },
  payload: ?Object,
  error: boolean
} & Action
export type StopAsyncValidation = {
  (form: string, errors: ?Object): StopAsyncValidationAction
}
export type StopSubmitAction = {
  type: StopSubmitType,
  meta: { form: string },
  payload: ?Object,
  error: boolean
} & Action
export type StopSubmit = { (form: string, errors: ?Object): StopSubmitAction }
export type SubmitAction = {
  type: SubmitType,
  meta: { form: string }
} & Action
export type Submit = { (form: string): SubmitAction }
export type SetSubmitFailedAction = {
  type: SetSubmitFailedType,
  meta: { form: string, fields: string[] },
  error: true
} & Action
export type SetSubmitFailed = {
  (form: string, ...fields: string[]): SetSubmitFailedAction
}
export type SetSubmitSucceededAction = {
  type: SetSubmitSucceededType,
  meta: { form: string, fields: string[] },
  error: false
} & Action
export type SetSubmitSucceeded = {
  (form: string, ...fields: string[]): SetSubmitSucceededAction
}
export type TouchAction = {
  type: TouchType,
  meta: { form: string, fields: string[] }
} & Action
export type Touch = { (form: string, ...fields: string[]): TouchAction }
export type UnregisterFieldAction = {
  type: UnregisterFieldType,
  meta: { form: string },
  payload: { name: string, destroyOnUnmount: boolean }
} & Action
export type UnregisterField = {
  (form: string, name: string, destroyOnUnmount: boolean): UnregisterFieldAction
}
export type UntouchAction = {
  type: UntouchType,
  meta: { form: string, fields: string[] }
} & Action
export type Untouch = { (form: string, ...fields: string[]): UntouchAction }
export type UpdateSyncErrorsAction = {
  type: UpdateSyncErrorsType,
  meta: { form: string },
  payload: { syncErrors: Object, error: any }
} & Action
export type UpdateSyncErrors = {
  (form: string, syncErrors: Object, error: any): UpdateSyncErrorsAction
}
export type UpdateSyncWarningsAction = {
  type: UpdateSyncWarningsType,
  meta: { form: string },
  payload: { syncWarnings: Object, warning: any }
} & Action
export type UpdateSyncWarnings = {
  (form: string, syncWarnings: Object, warning: any): UpdateSyncWarningsAction
}

export type Actions = {
  arrayInsert: ArrayInsert,
  arrayMove: ArrayMove,
  arrayPop: ArrayPop,
  arrayPush: ArrayPush,
  arrayRemove: ArrayRemove,
  arrayRemoveAll: ArrayRemoveAll,
  arrayShift: ArrayShift,
  arraySplice: ArraySplice,
  arraySwap: ArraySwap,
  arrayUnshift: ArrayUnshift,
  autofill: Autofill,
  blur: Blur,
  change: Change,
  clearSubmit: ClearSubmit,
  clearSubmitErrors: ClearSubmitErrors,
  clearAsyncError: ClearAsyncError,
  destroy: Destroy,
  focus: Focus,
  initialize: Initialize,
  registerField: RegisterField,
  reset: Reset,
  startAsyncValidation: StartAsyncValidation,
  startSubmit: StartSubmit,
  stopAsyncValidation: StopAsyncValidation,
  stopSubmit: StopSubmit,
  submit: Submit,
  setSubmitFailed: SetSubmitFailed,
  setSubmitSucceeded: SetSubmitSucceeded,
  touch: Touch,
  unregisterField: UnregisterField,
  untouch: Untouch,
  updateSyncErrors: UpdateSyncErrors,
  updateSyncWarnings: UpdateSyncWarnings
}
